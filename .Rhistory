clear
cls
2*2
12+8
22+2
class(x)
class(x)
x <- 3
x<-3
x <- 3
3 > 2
B1 / 3
B1 <- c(1,3,5,6)
B1
B1 <- c(1,3,5,6)
B1
class(x)
b
Res1 <- 1:1000
Res1/3
Field1 <- 1:3
Field2 <- 7:9
Field1 + Field2
Field1 <- 1:3
Field2 <- 7:9
Field1 + Field2
length(Field1)
Res1 <- 1:5
all(Res1<3)
any(Res1<3)
Res1 <- 1:5 #range 1 to 5
any(Res1<3) #anyone less than 3?
Res3 <- 50:60
Res3[1-5]
getwd()
inputTable <- read.csv("brUsers_SampleCSV.csv",TRUE,",")
inputTable <- read.csv("brUsers_SampleCSV.csv",TRUE,",")
class(inputTable)
View(inputTable)
inputTable <- read.csv("brUsers_SampleCSV.csv",TRUE,",")
class(inputTable)
head(inputTable)
inputTable2 <- read.csv("http://samplecsvs.s3.amazonaws.com/Sacramentorealestatetransactions.csv")
View(inputTable2)
inputTable2 <- read.csv("http://samplecsvs.s3.amazonaws.com/Sacramentorealestatetransactions.csv")
class(inputTable2)
inputTable2 <- read.csv("http://samplecsvs.s3.amazonaws.com/Sacramentorealestatetransactions.csv")
class(inputTable2)
head(inputTable2)
install.packages("XML")
library("XML", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
require(XML)
inputTable <- readHTMLTable("http://www.w3schools.com/html/html_tables.asp", which = 1)
class(inputTable)
View(inputTable)
require(XML)
inputTable3 <- readHTMLTable("http://www.w3schools.com/html/html_tables.asp", which = 1)
class(inputTable3)
inputTable <- read.csv("brUsers_SampleCSV.csv",TRUE,",")
hist(inputTable$age,main="Ages of Users",ylab="users",xlab = "Ages")
inputTable <- read.csv("brUsers_SampleCSV.csv",TRUE,",")
hist(inputTable$age,main="Ages of Users",ylab="users",xlab = "Ages")
plot(inputTable$age,inputTable$income,ylab="Income",xlab = "Age")
boxplot(inputTable$age)
install.packages("ggplot2")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("ggplot2")
head(diamonds)
library("ggplot2")
head(diamonds)
qplot(diamonds$carat,diamonds$price,color=diamonds$color)
oddcount <- function(x) {
k <- 0
for (n in x) {
if (n %% 2 == 1) k <- k+1}
return(k)
}
oddcount(c(1,3,5))
plot(c(-3,3), c(-1,5), type = "n", xlab="x", ylab="y")  #empty layout
x <- c(1,2,3)  #x values
y <- c(1,3,8)  #y values
plot(x,y) #plot the points
plot(c(-3,3), c(-1,5), type = "n", xlab="x", ylab="y")  #empty layout
x <- c(1,2,3)  #x values
y <- c(1,3,8)  #y values
plot(x,y) #plot the points
lmout <- lm(y ~ x) #linear regression
abline(lmout) #draw this out
plot(c(-3,3), c(-1,5), type = "n", xlab="x", ylab="y")  #empty layout
x <- c(1,2,3)  #x values
y <- c(1,3,8)  #y values
plot(x,y) #plot the points
lmout <- lm(y ~ x) #linear regression
plot(c(-3,3), c(-1,5), type = "n", xlab="x", ylab="y")  #empty layout
x <- c(1,2,3)  #x values
y <- c(1,3,8)  #y values
plot(x,y) #plot the points
lmout <- lm(y ~ x) #linear regression
abline(lmout) #draw this out
tabVarFactors <- read.table("var_factors_table.txt",header=FALSE)
head(tabVarFactors)
#density estimates (these are basically smoothed histograms)
d1 = density(tabVarFactors$V1,from=0,to=10)
d2 = density(tabVarFactors$V2,from=0,to=10)
plot(d1,main="",xlab="")
lines(d2)
library(lattice)
a <- 1:10
b <- 1:15
eg <- expand.grid(x=a,y=b)
eg$z <- eg$x^2 + eg$x * eg$y
wireframe(z ~ x+y, eg)
setwd("~/Documents/Seetru/R/CustomDashboard")
x
x <-c(1,2,3)
x <- c(1,2,3)
x[1]
x[4]
x <- c(1,8,3)
x[2]
library("jsonlite", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(jsonlite)
x <- c(3:5)
toJSON(x)
cat(toJSON(x))
library(jsonlite)
x <- c(3:5)
exportJSON <- toJSON(x)
write(exportJson, "test.json")
library(jsonlite)
x <- c(3:5)
exportJSON <- toJSON(x)
write(exportJson, "test.json")
library(jsonlite)
x <- c(3:5)
exportJSON <- toJSON(x)
write(exportJSON, "test.json")
library(jsonlite)
x <- c(1:6)
y <- c(10:16)
exportJSON <- toJSON(x,y)
write(exportJSON, "test.json")
library(jsonlite)
# x <- c(1:6)
# y <- c(10:16)
# exportJSON <- toJSON(x,y)
# write(exportJSON, "test.json")
list1 <- vector(mode="list")
list1[[1]] <- c("a", "b", "c")
list1[[2]] <- c(1, 2, 3)
exportJson <- toJSON(list1)
write(exportJson, "test2.json")
library(jsonlite)
list <- vector(mode="list")
list[[1]] <- c(1,2,3,4,5)
list[[2]] <- c(2,4,6,8,10)
exportJson <- toJSON(list)
write(exportJson, "output.json")
library(jsonlite)
list <- vector(mode="list")
list[[1]] <- c(1,2,3,4,5)
list[[2]] <- c(2,4,6,8,10)
exportJson <- toJSON(list)
write(exportJson, "output.json")
